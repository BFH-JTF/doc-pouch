openapi: 3.1.0
info:
  title: DocPouch
  description: A light-weight, document
  version: 1.0.0
servers:
  - url: 'https'
paths:
  /users/login:
    summary: Authenticate a user
    post:
      tags:
        - administration
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          description: "Unique user ID"
          name: userID
          required: true
          schema:
            type: number
      requestBody:
        description: "Data object containing only the attributes to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        200:
          description: "User has been successfully updated"
        401:
          description: "Not authorized to update this user"
        404:
          description: "User not found"


  /users/list:
    summary: Get all user information
    get:
      tags:
        - administration
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDisplay"

        401:
          description: "User does not have access to full user list"

  /users/update/{userID}:
    summary: Update the selected user applying the provided attributes
    post:
      tags:
        - administration
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          description: "Unique user ID"
          name: userID
          required: true
          schema:
            type: number
      requestBody:
        description: "Data object containing only the attributes to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        200:
          description: "User has been successfully updated"
        401:
          description: "Not authorized to update this user"
        404:
          description: "User not found"

  /users/create:
    summary: Create a new user
    post:
      tags:
        - administration
      security:
        - bearerAuth: []
      requestBody:
        description: "JSON body with all information to create a new user"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        200:
          description: "User account has been successfully created"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserDisplay"

        401:
          description: "User is unauthorized to create new users"

  /users/remove/{userID}:
    summary: Remove a user and all its documents
    get:
      tags:
        - administration
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          description: "Unique user ID"
          name: userID
          required: true
          schema:
            type: number

  /docs/create:
    summary: Create a new document
    post:
      tags:
        - documents
      security:
        - bearerAuth: []
      requestBody:
        description: "JSON body with all the information to create a new document"
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/CustomDocument"
      responses:
        200:
          description: "Document has been successfully created. The new id of the document can be read from the response."
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CustomDocument"

        401:
          description: "User is unauthorized to create new users"

  /docs/list:
    summary: "List all documents owned by the user but omit their content. For administrators, all document are listed."
    get:
      tags:
        - documents
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Array of documents with the content attribute omitted"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ShortDocument"

  /docs/fetch/{documentID}:
    summary: "Get a document by document id"
    get:
      parameters:
        - in: path
          description: "Unique ID of document"
          name: documentID
          required: true
          schema:
            type: string
          example: "3ufDC0Rh5g7arSC9"

      tags:
        - documents
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Document identified by document id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomDocument"

        401:
          description: "User does not have access to this document"

        404:
          description: "Document with this ID could not be found"

  /docs/update/{documentID}:
    summary: Update the selected user applying the provided attributes
    post:
      tags:
        - documents
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          description: "Unique user ID"
          name: documentID
          required: true
          schema:
            type: number
      requestBody:
        description: "Data object containing only the attributes to be updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreation"
      responses:
        200:
          description: "Document has been successfully updated"
        401:
          description: "Not authorized to update this document"
        404:
          description: "Document not found"

  /docs/remove/{documentID}:
    summary: Remove a user and all its documents
    get:
      tags:
        - documents
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          description: "Unique user ID"
          name: documentID
          required: true
          schema:
            type: number

components:
  schemas:
    ShortDocument:
      type: object
      description: "Data element describing a custom document with omitted content"
      properties:
        documentID:
          type: string
          description: "Unique ID of document. Only used for queries and deletions"
          example: "3ufDC0Rh5g7arSC9"
        owner:
          type: number
          description: "User ID of document owner"
          example: 13
        doc_type:
          type: number
          description: "Type of document - can be used by user for document organization"
          example: 17
        doc_subtype:
          type: number
          description: "Sub-type of document - can be used by user for document organization"
          example: 11
        doc_title:
          type: string
          description: "The title of the document"
          example: "Mission Statement"

    CustomDocument:
      type: object
      description: "Data element describing a custom document"
      properties:
        documentID:
          type: string
          description: "Unique ID of document. Only used for queries and deletions"
          example: "3ufDC0Rh5g7arSC9"
        owner:
          type: number
          description: "User ID of document owner"
          example: 13
        doc_type:
          type: number
          description: "Type of document - can be used by user for document organization"
          example: 17
        doc_subtype:
          type: number
          description: "Sub-type of document - can be used by user for document organization"
          example: 11
        doc_title:
          type: string
          description: "The title of the document"
          example: "Mission Statement"
        doc_content:
          type: string
          description: "The context of the document in a string. If you want to store binary data it needs to be Base64 encoded."
          example: "We strive for a world that ..."


    UserRole:
      type: object
      description: "Data element describing a user role"
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          description: "Role names can be changed at any time and are not necessarily unique. Roles are uniquely identified based on their id."
          example: "Strategic Planner"
        description:
          type: string
          description: "Description of role, its purpose and users"
          example: "These users create the strategic elements and have therefore access to the necessary data"
        admin:
          type: boolean
          description: "Is the user an administrator with full access to all data?"
          example: false

    UserDisplay:
      type: object
      description: "Data element describing the user-facing side of a user account"
      properties:
        id:
          type: integer
          description: "A numeric ID not to be confused up with the document property id, which can be found in any document."
          example: 2
        name:
          type: string
          description: "User names can be changed at any time and are not necessarily unique. User are uniquely identified based on their id."
          example: 2
        email:
          type: string
        roles:
          type: array
          description: "Array of user roles this user account is part of"
          items:
            $ref: "#/components/schemas/UserRole"
          minItems: 1

    UserCreation:
      type: object
      description: "Data element needed to trigger user creation"
      properties:
        name:
          type: string
          example: "Darth Vader"
          description: "User names can be changed at any time and are not necessarily unique. User are uniquely identified based on their id."
        password:
          type: string
          example: "darths-secret"
          description: "Password is used as main authentication element"
        email:
          type: string
          example: "darth@gmail.com"
        roles:
          type: array
          description: "IDs of roles the new user account is supposed to be a member of"
          items:
            type: number
          example: [1, 5]
          minItems: 1